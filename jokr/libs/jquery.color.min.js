
(function(e, t) {
    function h(e, t, n) {
        var r = u[t.type] || {};
        if (e == null) {
            return n || !t.def ? null : t.def
        }
        e = r.floor ? ~~e : parseFloat(e);
        if (isNaN(e)) {
            return t.def
        }
        if (r.mod) {
            return (e + r.mod) % r.mod
        }
        return 0 > e ? 0 : r.max < e ? r.max : e
    }
    function p(t) {
        var n = s(),
            r = n._rgba = [];
        t = t.toLowerCase();
        c(i, function(e, i) {
            var s, u = i.re.exec(t),
                a = u && i.parse(u),
                f = i.space || "rgba";
            if (a) {
                s = n[f](a);
                n[o[f].cache] = s[o[f].cache];
                r = n._rgba = s._rgba;
                return false
            }
        });
        if (r.length) {
            if (r.join() === "0,0,0,0") {
                e.extend(r, l.transparent)
            }
            return n
        }
        return l[t]
    }
    function d(e, t, n) {
        n = (n + 1) % 1;
        if (n * 6 < 1) {
            return e + (t - e) * n * 6
        }
        if (n * 2 < 1) {
            return t
        }
        if (n * 3 < 2) {
            return e + (t - e) * (2 / 3 - n) * 6
        }
        return e
    }
    var n = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",
        r = /^([\-+])=\s*(\d+\.?\d*)/,
        i = [{
            re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function(e) {
                return [e[1], e[2], e[3], e[4]]
            }
        }, {
            re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function(e) {
                return [e[1] * 2.55, e[2] * 2.55, e[3] * 2.55, e[4]]
            }
        }, {
            re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
            parse: function(e) {
                return [parseInt(e[1], 16), parseInt(e[2], 16), parseInt(e[3], 16)]
            }
        }, {
            re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
            parse: function(e) {
                return [parseInt(e[1] + e[1], 16), parseInt(e[2] + e[2], 16), parseInt(e[3] + e[3], 16)]
            }
        }, {
            re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            space: "hsla",
            parse: function(e) {
                return [e[1], e[2] / 100, e[3] / 100, e[4]]
            }
        }],
        s = e.Color = function(t, n, r, i) {
            return new e.Color.fn.parse(t, n, r, i)
        }, o = {
            rgba: {
                props: {
                    red: {
                        idx: 0,
                        type: "byte"
                    },
                    green: {
                        idx: 1,
                        type: "byte"
                    },
                    blue: {
                        idx: 2,
                        type: "byte"
                    }
                }
            },
            hsla: {
                props: {
                    hue: {
                        idx: 0,
                        type: "degrees"
                    },
                    saturation: {
                        idx: 1,
                        type: "percent"
                    },
                    lightness: {
                        idx: 2,
                        type: "percent"
                    }
                }
            }
        }, u = {
            "byte": {
                floor: true,
                max: 255
            },
            percent: {
                max: 1
            },
            degrees: {
                mod: 360,
                floor: true
            }
        }, a = s.support = {}, f = e("<p>")[0],
        l, c = e.each;
    f.style.cssText = "background-color:rgba(1,1,1,.5)";
    a.rgba = f.style.backgroundColor.indexOf("rgba") > -1;
    c(o, function(e, t) {
        t.cache = "_" + e;
        t.props.alpha = {
            idx: 3,
            type: "percent",
            def: 1
        }
    });
    s.fn = e.extend(s.prototype, {
        parse: function(n, r, i, u) {
            if (n === t) {
                this._rgba = [null, null, null, null];
                return this
            }
            if (n.jquery || n.nodeType) {
                n = e(n).css(r);
                r = t
            }
            var a = this,
                f = e.type(n),
                d = this._rgba = [];
            if (r !== t) {
                n = [n, r, i, u];
                f = "array"
            }
            if (f === "string") {
                return this.parse(p(n) || l._default)
            }
            if (f === "array") {
                c(o.rgba.props, function(e, t) {
                    d[t.idx] = h(n[t.idx], t)
                });
                return this
            }
            if (f === "object") {
                if (n instanceof s) {
                    c(o, function(e, t) {
                        if (n[t.cache]) {
                            a[t.cache] = n[t.cache].slice()
                        }
                    })
                } else {
                    c(o, function(t, r) {
                        var i = r.cache;
                        c(r.props, function(e, t) {
                            if (!a[i] && r.to) {
                                if (e === "alpha" || n[e] == null) {
                                    return
                                }
                                a[i] = r.to(a._rgba)
                            }
                            a[i][t.idx] = h(n[e], t, true)
                        });
                        if (a[i] && e.inArray(null, a[i].slice(0, 3)) < 0) {
                            a[i][3] = 1;
                            if (r.from) {
                                a._rgba = r.from(a[i])
                            }
                        }
                    })
                }
                return this
            }
        },
        is: function(e) {
            var t = s(e),
                n = true,
                r = this;
            c(o, function(e, i) {
                var s, o = t[i.cache];
                if (o) {
                    s = r[i.cache] || i.to && i.to(r._rgba) || [];
                    c(i.props, function(e, t) {
                        if (o[t.idx] != null) {
                            n = o[t.idx] === s[t.idx];
                            return n
                        }
                    })
                }
                return n
            });
            return n
        },
        _space: function() {
            var e = [],
                t = this;
            c(o, function(n, r) {
                if (t[r.cache]) {
                    e.push(n)
                }
            });
            return e.pop()
        },
        transition: function(e, t) {
            var n = s(e),
                r = n._space(),
                i = o[r],
                a = this.alpha() === 0 ? s("transparent") : this,
                f = a[i.cache] || i.to(a._rgba),
                l = f.slice();
            n = n[i.cache];
            c(i.props, function(e, r) {
                var i = r.idx,
                    s = f[i],
                    o = n[i],
                    a = u[r.type] || {};
                if (o === null) {
                    return
                }
                if (s === null) {
                    l[i] = o
                } else {
                    if (a.mod) {
                        if (o - s > a.mod / 2) {
                            s += a.mod
                        } else if (s - o > a.mod / 2) {
                            s -= a.mod
                        }
                    }
                    l[i] = h((o - s) * t + s, r)
                }
            });
            return this[r](l)
        },
        blend: function(t) {
            if (this._rgba[3] === 1) {
                return this
            }
            var n = this._rgba.slice(),
                r = n.pop(),
                i = s(t)._rgba;
            return s(e.map(n, function(e, t) {
                return (1 - r) * i[t] + r * e
            }))
        },
        toRgbaString: function() {
            var t = "rgba(",
                n = e.map(this._rgba, function(e, t) {
                    return e == null ? t > 2 ? 1 : 0 : e
                });
            if (n[3] === 1) {
                n.pop();
                t = "rgb("
            }
            return t + n.join() + ")"
        },
        toHslaString: function() {
            var t = "hsla(",
                n = e.map(this.hsla(), function(e, t) {
                    if (e == null) {
                        e = t > 2 ? 1 : 0
                    }
                    if (t && t < 3) {
                        e = Math.round(e * 100) + "%"
                    }
                    return e
                });
            if (n[3] === 1) {
                n.pop();
                t = "hsl("
            }
            return t + n.join() + ")"
        },
        toHexString: function(t) {
            var n = this._rgba.slice(),
                r = n.pop();
            if (t) {
                n.push(~~ (r * 255))
            }
            return "#" + e.map(n, function(e) {
                e = (e || 0).toString(16);
                return e.length === 1 ? "0" + e : e
            }).join("")
        },
        toString: function() {
            return this._rgba[3] === 0 ? "transparent" : this.toRgbaString()
        }
    });
    s.fn.parse.prototype = s.fn;
    o.hsla.to = function(e) {
        if (e[0] == null || e[1] == null || e[2] == null) {
            return [null, null, null, e[3]]
        }
        var t = e[0] / 255,
            n = e[1] / 255,
            r = e[2] / 255,
            i = e[3],
            s = Math.max(t, n, r),
            o = Math.min(t, n, r),
            u = s - o,
            a = s + o,
            f = a * .5,
            l, c;
        if (o === s) {
            l = 0
        } else if (t === s) {
            l = 60 * (n - r) / u + 360
        } else if (n === s) {
            l = 60 * (r - t) / u + 120
        } else {
            l = 60 * (t - n) / u + 240
        }
        if (u === 0) {
            c = 0
        } else if (f <= .5) {
            c = u / a
        } else {
            c = u / (2 - a)
        }
        return [Math.round(l) % 360, c, f, i == null ? 1 : i]
    };
    o.hsla.from = function(e) {
        if (e[0] == null || e[1] == null || e[2] == null) {
            return [null, null, null, e[3]]
        }
        var t = e[0] / 360,
            n = e[1],
            r = e[2],
            i = e[3],
            s = r <= .5 ? r * (1 + n) : r + n - r * n,
            o = 2 * r - s;
        return [Math.round(d(o, s, t + 1 / 3) * 255), Math.round(d(o, s, t) * 255), Math.round(d(o, s, t - 1 / 3) * 255), i]
    };
    c(o, function(n, i) {
        var o = i.props,
            u = i.cache,
            a = i.to,
            f = i.from;
        s.fn[n] = function(n) {
            if (a && !this[u]) {
                this[u] = a(this._rgba)
            }
            if (n === t) {
                return this[u].slice()
            }
            var r, i = e.type(n),
                l = i === "array" || i === "object" ? n : arguments,
                p = this[u].slice();
            c(o, function(e, t) {
                var n = l[i === "object" ? e : t.idx];
                if (n == null) {
                    n = p[t.idx]
                }
                p[t.idx] = h(n, t)
            });
            if (f) {
                r = s(f(p));
                r[u] = p;
                return r
            } else {
                return s(p)
            }
        };
        c(o, function(t, i) {
            if (s.fn[t]) {
                return
            }
            s.fn[t] = function(s) {
                var o = e.type(s),
                    u = t === "alpha" ? this._hsla ? "hsla" : "rgba" : n,
                    a = this[u](),
                    f = a[i.idx],
                    l;
                if (o === "undefined") {
                    return f
                }
                if (o === "function") {
                    s = s.call(this, f);
                    o = e.type(s)
                }
                if (s == null && i.empty) {
                    return this
                }
                if (o === "string") {
                    l = r.exec(s);
                    if (l) {
                        s = f + parseFloat(l[2]) * (l[1] === "+" ? 1 : -1)
                    }
                }
                a[i.idx] = s;
                return this[u](a)
            }
        })
    });
    s.hook = function(t) {
        var n = t.split(" ");
        c(n, function(t, n) {
            e.cssHooks[n] = {
                set: function(t, r) {
                    var i, o, u = "";
                    if (r !== "transparent" && (e.type(r) !== "string" || (i = p(r)))) {
                        r = s(i || r);
                        if (!a.rgba && r._rgba[3] !== 1) {
                            o = n === "backgroundColor" ? t.parentNode : t;
                            while ((u === "" || u === "transparent") && o && o.style) {
                                try {
                                    u = e.css(o, "backgroundColor");
                                    o = o.parentNode
                                } catch (f) {}
                            }
                            r = r.blend(u && u !== "transparent" ? u : "_default")
                        }
                        r = r.toRgbaString()
                    }
                    try {
                        t.style[n] = r
                    } catch (f) {}
                }
            };
            e.fx.step[n] = function(t) {
                if (!t.colorInit) {
                    t.start = s(t.elem, n);
                    t.end = s(t.end);
                    t.colorInit = true
                }
                e.cssHooks[n].set(t.elem, t.start.transition(t.end, t.pos))
            }
        })
    };
    s.hook(n);
    e.cssHooks.borderColor = {
        expand: function(e) {
            var t = {};
            c(["Top", "Right", "Bottom", "Left"], function(n, r) {
                t["border" + r + "Color"] = e
            });
            return t
        }
    };
    l = e.Color.names = {
        aqua: "#00ffff",
        black: "#000000",
        blue: "#0000ff",
        fuchsia: "#ff00ff",
        gray: "#808080",
        green: "#008000",
        lime: "#00ff00",
        maroon: "#800000",
        navy: "#000080",
        olive: "#808000",
        purple: "#800080",
        red: "#ff0000",
        silver: "#c0c0c0",
        teal: "#008080",
        white: "#ffffff",
        yellow: "#ffff00",
        transparent: [null, null, null, 0],
        _default: "#ffffff"
    }
})(jQuery) 